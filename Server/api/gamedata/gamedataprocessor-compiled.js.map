{"version":3,"sources":["gamedataprocessor.js"],"names":[],"mappings":"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","file":"gamedataprocessor-compiled.js","sourcesContent":["/**\n * Created by Joey on 4/4/16.\n */\nvar gameAPI = require(__dirname + '/../../giantAPI.js');\nvar bingAPI = require(__dirname + '/../../newsAPI.js');\nvar dbm = require(__dirname + '/gamedatamodel.js');\nvar steamAPI = require(__dirname + '/../../steamAPI');\nvar _ = require('underscore-node');\n\nmodule.exports = {\n    searchUpcomingGames: function (searchTerms, callback) {\n        gameAPI.searchForUpcomingGame(searchTerms, function (response) {\n            callback(response);\n        });\n    },\n\n//Use bing API module to get News Article data\n    getNewsArticleInfo: function (gameName, callback) {\n        bingAPI.getGameNews(gameName, function (res) {\n            callback(res);\n        });\n    },\n\n//Use bing API module to get media data\n    getMediaData: function (gameName, callback) {\n        bingAPI.getGameMedia(gameName, function (res) {\n            callback(res);\n        });\n    },\n\n    getTopTrackedGamesData: function (numToGet, handleTopTrackedData) {\n        module.exports.getTopTrackedGamesIds(numToGet, function (topTrackedArray) {\n            //Contains actual data for each game\n            var topTrackedGameData = [];\n            var numGotten = 0;\n\n            //For each top game (each elemnt has id and count)\n            for (var i = 0; i < topTrackedArray.length; i++) {\n                var curID;\n\n                //If this is null (We have <5 tracked games)\n                //increment the num gotten to let the callback know to\n                //call handleTopTRackedData sooner\n                if (!topTrackedArray[i]) {\n                    numGotten++;\n                }\n                else {\n                    //Current ID we are getting data for\n                    curID = topTrackedArray[i].id;\n\n                    //Get the game's data from Giant Bomb\n                    gameAPI.getDataForGameById(curID, function (gameData) {\n                        topTrackedGameData.push(gameData);\n                        numGotten++;\n\n                        //Once we have gotten data for each game in the array\n                        if (numGotten === topTrackedArray.length) {\n                            console.log(\"Top Tracked Data: \" + topTrackedGameData);\n                            handleTopTrackedData(topTrackedGameData);\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n//Callsback with array, each element containing id and count\n    getTopTrackedGamesIds: function (numToGet, handleTopTrackedGames) {\n        console.log(\"Entered Top tracked\");\n        dbm.getAllTrackedIdsColumn(function (gameIds) {\n            console.log(\"All Tracked Game IDs: \" + JSON.stringify(gameIds));\n\n            //Array for counting the number of times each game occurs\n            var countArray = [];\n\n            //For each Id in the DB first we need to count how many times it occurs\n            for (var i = 0; i < gameIds.length; i++) {\n                var curGameId = gameIds[i].gameid;\n                var gameAccountedFor = false;\n\n                //Check if we have started counting for this game\n                for (var j = 0; j < countArray.length; j++) {\n                    //If we find it add one to the count\n                    if (countArray[j].id === curGameId) {\n                        gameAccountedFor = true;\n                        countArray[j].numTrack++;\n                    }\n                }\n\n                //If the game is not there, add it and start at 1\n                if (!gameAccountedFor) {\n                    countArray.push({\n                        id: curGameId,\n                        numTrack: 1\n                    })\n                }\n            }\n\n            //Now get the most occuring games\n            _.sortBy(countArray, function (game) {\n                return game.numTrack;\n            });\n\n            //Build array to return with only the required number of elements\n            var limitedArray = [];\n            for (var k = 0; k < numToGet; k++) {\n                limitedArray.push(countArray[k]);\n            }\n\n            //Finally return our data\n            handleTopTrackedGames(limitedArray);\n\n        });\n    },\n\n    getUpdatedReleaseDate: function (gameid, callback) {\n        gameAPI.getDataForGameById(gameid, function (results) {\n            //If we get data, format it and send it back to the callback\n            if (results != null) {\n                var dateInfo = {\n                    month: results.releaseMonth,\n                    day: results.releaseDay,\n                    year: results.releaseYear\n                };\n\n                callback(dateInfo);\n            }\n            else {\n                callback(null);\n            }\n        });\n    }\n}"]}
{"version":3,"sources":["userdataprocessor.js"],"names":[],"mappings":"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","file":"userdataprocessor-compiled.js","sourcesContent":["/**\n * Created by Joey on 2/17/16.\n * This file interacts with the giantBombAPI file,\n * this should be the only file that knows about the\n * giantAPI file, use this to process the data from gaintAPI,\n * and Bing News API\n * and provide helper methods to the router files\n */\nvar gameAPI = require(__dirname + '/../../giantAPI.js');\nvar dbm = require(__dirname + '/userdatamodel.js');\nvar steamAPI = require(__dirname + '/../../steamAPI');\nvar _ = require('underscore-node');\n\n//\"public\" functions, these are usable by any module that \"requires\" this module\nmodule.exports = {\n\n    getUserTrackedGameData: function (userId, handleTrackedGameData) {\n        dbm.getUsersTrackedGameIds(userId, function (ids) {\n            //If we get any track gameIds\n            if (ids && ids.length > 0) {\n                //Init our return array\n                var returnGameData = [];\n                var successfulGets = 0;//Number of successful requests\n                var attempts = 0;//Number of total requests\n\n                //For each gameId we got back\n                for (var i = 0; i < ids.length; i++) {\n                    //Now request data about each game using the ID, and the giantBombAPI Module\n                    gameAPI.getDataForGameById(ids[i].gameid, function (gameData) {\n                        //Track attempts to get game data, and number actually gotten (successful)\n                        //We need to keep track since this is Async, so we know when to make callback\n                        attempts++;\n                        if (gameData) {\n                            returnGameData.push(gameData);\n                            successfulGets++;\n                        }\n\n                        //If we made all our attempts, call the original callback for the getUserTrackedGameData() functions\n                        //and send it all of the tracked games data\n                        if (returnGameData.length == successfulGets && attempts == ids.length)\n                            handleTrackedGameData(returnGameData);\n                    });\n                }\n            }\n            else {\n                handleTrackedGameData([]);\n            }\n        });\n    },\n\n    //Use database manager module to add a tracked game for a user\n    addTrackedGameId: function (gameId, userid, doneCallback) {\n        dbm.addGameIDToUser(gameId, userid, doneCallback);\n    },\n\n\n    //Use database manager module to remove a tracked game\n    removeTrackedGameId: function (gameId, userId, doneCallback) {\n        dbm.removeGameIDFromUser(gameId, userId, doneCallback);\n    },\n\n    getSteamFriendsTrackedGames: function (usersteamid, handleFriendsTrackedGames) {\n        var friendsTrackedGames = [];\n        var friendsDataGotten = 0;\n\n        //Get all of the user's friends from the steam API\n        steamAPI.getSteamFriends(usersteamid, function (friendsDataArray) {\n            console.log(JSON.stringify(friendsDataArray));\n\n             //Get the steam user info for each friend\n             steamAPI.getSteamUsersInfo(_.pluck(friendsDataArray, \"steamid\"), function(userDatas)\n             {\n                 //Get data for each friend\n                 for (var i = 0; i < friendsDataArray.length; i++) {\n\n                     //The current friend we are getting data for\n                     var curFriendid = friendsDataArray[i].steamid;\n\n                     //Make the data request for each user's games\n                     (function (userid, userDatas) {\n                         module.exports.getUserTrackedGameData(\"http://steamcommunity.com/openid/id/\" + userid, function (trackGameData) {\n\n                             //Get the info for this user\n                             var userInfo = _.where(userDatas.players, {steamid: userid})[0];\n\n                             //Push this to the array, each object contains\n                             //firends steamID and array of their tracked games\n                             //each with full data\n                             friendsTrackedGames.push({\n                                 avatar: userInfo.avatar,\n                                 userid: userInfo.personaname,\n                                 gameData: trackGameData\n                             });\n                             friendsDataGotten++;\n                             if (friendsDataGotten == friendsDataArray.length) {\n                                 handleFriendsTrackedGames(friendsTrackedGames);\n                             }\n                         });\n                     }(curFriendid, userDatas));\n                 }\n             });\n\n\n        });\n    }\n};\n\nfunction getGameImageSource(gameid, callback)\n{\n    gameAPI.getDataForGameById(gameid, function(response){\n        callback(response.imageLink);\n    });\n}\n\n\n\n\n"]}
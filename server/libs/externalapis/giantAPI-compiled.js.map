{"version":3,"sources":["giantAPI.js"],"names":[],"mappings":"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","file":"giantAPI-compiled.js","sourcesContent":["/**\n * Created by Joey on 2/16/16.\n * This module handles all requests to the GiantBomb API\n */\n//require('dotenv').config();\nvar apiKey = process.env.GB_KEY;\nvar giantBombAPI = 'http://www.giantbomb.com/api';\nvar request = require('request');\nvar _ = require('underscore-node');\n\n//Giantbomb API search request and filters results to just upcoming games\n//and returns an object with the info we want\nexport function searchForUpcomingGame(searchTerms, callback)\n{\n    var todaysDate = new Date();\n\n    //This will be our callback response\n    var gameResponses = [];\n    var jsonRes;\n    var searchString = giantBombAPI + '/search/?api_key=' + apiKey +\n       '&format=json' + '&query=' + searchTerms + \"&resources=game\";\n\n    var qus = {\n        format: 'json',\n        query: searchTerms,\n        resources: 'game',\n        api_key: apiKey\n    };\n\n    //Make our request to the API, need custom user agent as per their API\n    request.get({uri: searchString, headers:{'user-agent' : 'UpcomingAwesomeGamesWoo'}}, function (err, res, body) {\n\n        jsonRes = JSON.parse(body);\n\n        //Results key value -> array of results\n        var results = jsonRes.results;\n\n        //For each result\n        for(var i = 0; i < results.length; i++)\n        {\n            //Easier to work with\n            var curResult = results[i];\n\n            //If this game is TBD or has a future date we want it\n            var islater = curResult.expected_release_year >= todaysDate.getYear() &&\n                curResult.expected_release_month >= todaysDate.getMonth() + 1 &&\n                curResult.expected_release_day >= todaysDate.getDay() + 1;\n            var isTBD = (curResult.expected_release_year == null || curResult.expected_release_month == null ||\n                        curResult.expected_release_day == null) && curResult.original_release_date == null;\n\n            if(islater || isTBD) {\n                //Just need the name from each platform\n                var resultsPlatforms = _.pluck(curResult.platforms, 'name');\n\n                //Build our response object and add it to the response array\n                gameResponses.push({\n                    name: results[i].name,\n                    imageLink: curResult.image != null ? curResult.image.icon_url :\n                        \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\",\n                    platforms: resultsPlatforms,\n                    releaseMonth: curResult.expected_release_month,\n                    releaseYear: curResult.expected_release_year,\n                    releaseDay: curResult.expected_release_day,\n                    gbGameId: curResult.id //We can store just this in db\n                });\n            }\n        }\n        //Send callback\n        callback(gameResponses);\n    });\n}\n\nexport function getDataForGameById(gameId, handleIdGameData)\n{\n    if(gameId) {\n        var queryString = giantBombAPI + \"/game/\" + gameId + \"/?api_key=\" + apiKey + '&format=json';\n\n        //Make our http request to the API\n        request.get({\n            uri: queryString,\n            headers: {'user-agent': 'UpcomingAwesomeGamesWoo'}//Required by API\n        }, function (err, repond, body) {\n            if (!err) {\n                var jsonRes = JSON.parse(body);\n\n                //Should be only one result since we are getting specific game by id not games\n                var result = jsonRes.results;\n\n                //Format our response JSON object\n                var gameDatas = {\n                    name: result.name,\n                    imageLink: result.image != null ? result.image.icon_url :\n                        \"https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg\",\n                    platforms: _.pluck(result.platforms, 'name'),\n                    releaseMonth: result.expected_release_month,\n                    releaseYear: result.expected_release_year,\n                    releaseDay: result.expected_release_day,\n                    gbGameId: result.id //We can store just this in db\n                };\n\n                //callback\n                handleIdGameData(gameDatas);\n            }\n            else(handleIdGameData(null));\n        });\n    }\n    else\n    {\n        handleIdGameData(null);\n    }\n}\n\n"]}
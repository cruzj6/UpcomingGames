{"version":3,"sources":["gamedataprocessor.js"],"names":[],"mappings":"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","file":"gamedataprocessor-compiled.js","sourcesContent":["/**\n * Created by Joey on 4/4/16.\n */\nvar externalAPIPath = '/../../libs/externalapis/';\nvar gameAPI = require(__dirname + externalAPIPath + 'giantAPI');\nvar bingAPI = require(__dirname + externalAPIPath + 'newsAPI');\nvar steamAPI = require(__dirname + externalAPIPath + 'steamAPI');\nvar dbm = require(__dirname + '/gamedatamodel');\nvar _ = require('underscore-node');\n\n\nexport function searchUpcomingGames(searchTerms, callback){\n    gameAPI.searchForUpcomingGame(searchTerms, function (response) {\n        callback(response);\n    });\n}\n\n//Use bing API module to get News Article data\nexport function getNewsArticleInfo(gameName, callback) {\n    bingAPI.getGameNews(gameName, function (res) {\n        callback(res);\n    });\n}\n\n//Use bing API module to get media data\nexport function getMediaData(gameName, callback) {\n    bingAPI.getGameMedia(gameName, function (res) {\n        callback(res);\n    });\n}\n\nexport function getTopTrackedGamesData(numToGet, handleTopTrackedData) {\n    getTopTrackedGamesIds(numToGet, function (topTrackedArray) {\n        //Contains actual data for each game\n        var topTrackedGameData = [];\n        var numGotten = 0;\n\n        //For each top game (each elemnt has id and count)\n        for (var i = 0; i < topTrackedArray.length; i++) {\n            var curID;\n\n            //If this is null (We have <5 tracked games)\n            //increment the num gotten to let the callback know to\n            //call handleTopTRackedData sooner\n            if (!topTrackedArray[i]) {\n                numGotten++;\n            }\n            else {\n                //Current ID we are getting data for\n                curID = topTrackedArray[i].id;\n\n                //Get the game's data from Giant Bomb\n                gameAPI.getDataForGameById(curID, function (gameData) {\n                    topTrackedGameData.push(gameData);\n                    numGotten++;\n\n                    //Once we have gotten data for each game in the array\n                    if (numGotten === topTrackedArray.length) {\n                        console.log(\"Top Tracked Data: \" + topTrackedGameData);\n                        handleTopTrackedData(topTrackedGameData);\n                    }\n                });\n            }\n        }\n    });\n}\n\n//Callsback with array, each element containing id and count\nexport function getTopTrackedGamesIds(numToGet, handleTopTrackedGames) {\n    console.log(\"Entered Top tracked\");\n    dbm.getAllTrackedIdsColumn(function (gameIds) {\n        console.log(\"All Tracked Game IDs: \" + JSON.stringify(gameIds));\n\n        //Array for counting the number of times each game occurs\n        var countArray = [];\n\n        //For each Id in the DB first we need to count how many times it occurs\n        for (var i = 0; i < gameIds.length; i++) {\n            var curGameId = gameIds[i].gameid;\n            var gameAccountedFor = false;\n\n            //Check if we have started counting for this game\n            for (var j = 0; j < countArray.length; j++) {\n                //If we find it add one to the count\n                if (countArray[j].id === curGameId) {\n                    gameAccountedFor = true;\n                    countArray[j].numTrack++;\n                }\n            }\n\n            //If the game is not there, add it and start at 1\n            if (!gameAccountedFor) {\n                countArray.push({\n                    id: curGameId,\n                    numTrack: 1\n                })\n            }\n        }\n\n        //Now get the most occuring games\n        _.sortBy(countArray, function (game) {\n            return game.numTrack;\n        });\n\n        //Build array to return with only the required number of elements\n        var limitedArray = [];\n        for (var k = 0; k < numToGet; k++) {\n            limitedArray.push(countArray[k]);\n        }\n\n        //Finally return our data\n        handleTopTrackedGames(limitedArray);\n\n    });\n}\n\nexport function getUpdatedReleaseDate(gameid, callback) {\n    gameAPI.getDataForGameById(gameid, function (results) {\n        //If we get data, format it and send it back to the callback\n        if (results != null) {\n            var dateInfo = {\n                month: results.releaseMonth,\n                day: results.releaseDay,\n                year: results.releaseYear\n            };\n\n            callback(dateInfo);\n        }\n        else {\n            callback(null);\n        }\n    });\n}\n"]}